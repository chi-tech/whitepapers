%!PS-Adobe-2.0 EPSF-1.2
%%Title: tmpPSFile
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%CreationDate: Wed Jul  8 18:21:14 2020
%%For:janv4 janv4
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 4 2 453 147
%%HiResBoundingBox: 4.032000 2.862000 452.537986 146.861996
%%EndComments

%%BeginProlog
%%BeginPreview: 449 145 8 1740
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000252500000000002519
% 00000025250000000025190000000000000000000000000000000000000025190000002525000000
% 00000000000025190000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000198900000000002564
% 00000019890000000025640000000000000000000000000000000000000025640000001989000000
% 00000000000025640000000000000000000025700000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008900000000000064
% 00000000890000000000640000000000000000000000000000000000000000640000000089000000
% 00000000000000640000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000196456563100891964314a000089
% 315625008900000000008931562519564a3e003e315625643e4a0000000000893156250089196431
% 4a001964316400641970250000003e3156004a89564a64640025643e4a0000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000005631316400008970000064310089
% 00007c008900000000008900007c0c3125890064643e7c3e316400000000008900007c0089700000
% 643170190025006464000000000064643e000089190c8900007c3e31640000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000254a4a0c0000897c000064310089
% 00008900890000000000890000893e5600890c252564890c000c00000000008900008900897c0000
% 64317019000c0070563e00000000252564250089007c0c25007c0c000c0000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000197064560025952f4a3156000070
% 31562525950c64646400703156254a4a3e7c3164313e3964313e00646464007031562525952f4a31
% 56002564314a257c0c953100646492313e19259569643164002564313e0000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000006400003e31000000000000000000
% 00000000000031313100000000000000000000000000000000000031313100000000000000000000
% 00000000000000000000000031313100000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000212100000000000000000000000b2c2c0b000000211600000021210000
% 000000000000002116000000000000000000000000000b2c0b00000b2c0b00000000000000000000
% 000000000000580b0000000021410000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000253e314a0c000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000016780000000000000000000000004c6300000000215800000016780000
% 0000000000000021580000000000000000000000000000632c000000632c00000000000000000000
% 00000000000058000b41364c00580000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000033cc0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000780000000000000000000000002c5800000000005800000000780000
% 0000000000000000580000000000000000000000000000582c000000582c00000000000000000000
% 00000000000058004c2c00580b580000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000011dd330000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000780016582c410016582c5800002c580000000000782c4c2100780016
% 582c4116582c580058166321000000164c4136000b412c632c0b412c632c4163582121583641362c
% 4c00362c4c005800632c00582c580000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb77000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000007800630000582c6316002100002c5800000000007800006e00780063
% 0000587416002100585800000000000b2c217800631600582c631600582c006e00006e362c585858
% 36005858360058006e2c00582c580000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000022cc00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000078006e0000582c6316000b2c212c580000000000780000780078006e
% 0000587416000b00634c3600000000364c00780b630b00582c630b00582c005800006e0b000b2121
% 5821212158215800582c005816580000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000668800000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000021830b21412c4c0021582c4136364c360058585800632c4c2121830b21
% 412c4c21582c41216e0b832c0058587641366e2c21582c6e4c21582c6e4c216e160021582c36582c
% 3616582c3616580016580b5800580000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000aa3300000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000161600002c2c2c000000000000000000
% 000000000000000000000000002c2c2c000000000000000000000000000000000000000000000000
% 0000000000005800000b210000580000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000bb0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000630b0000000021580000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000bb0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000002c0b0000000021160000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000bb0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000bb0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000011000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000aa4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000033cc66000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000884400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000066dd4400000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000778800000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000099bb110000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000448800000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000999900000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044bb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000aa990000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000077aa000000000000000000000000000000000000000000000000000000333300
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000011dd11000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000778800000000000000000000000000000000000000000000000000000000333300
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000dd2200000000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000022bb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000044bb0000000000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000777700000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000bb550000000000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000dd2200000000000000000000000000000000
% 00000000000000252500000000000000000000000000002525000000002519000000000000000000
% 00000000000000000000251900000025250000000000000000002519000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000033bbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc9bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000
% 00000000000000000033bbbbbbbbbb66000066bbbbbbbbbb000000bbbbbbbbbba888888888888888
% 8888888888b0df8888888888888888c8888888888888888888888888888888888888888888dfbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000332266bb0000000000000000660000000000000000
% 00000000000000198900000000000000000000000000001989000000002564000000000000000000
% 00000000000000000000256400000019890000000000000000002564000000000000000000002570
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ffccbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbddffffccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbddff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008877444444444444
% 444444445de65d4444444444444444cd444444444444444444444444444444444444444444f1bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000088a8dd110000000000000033dd0000000000000000
% 00000000000000008900000000000000000000000000000089000000000064000000000000000000
% 00000000000000000000006400000000890000000000000000000064000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 00000011cc66000000000000000000bb000000000000000000000000000000000000000000bb0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000e4fd33000000000000000088ff3300000000000000
% 000000000000000089001964314a001964316419564a3e008900000000008931562519564a3e003e
% 31560025643e4a00000000893156250089001964314a001964316464197025000000003e31564a89
% 00564a646425643e4a
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000004400000000000000000000bb000000000000000000000000000000000000000000bb0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000044ffff330000000000000000ddff8800000000000000
% 000000000000000089007000006431701900250c312589008900000000008900007c0c3125890064
% 643e007c3e3164000000008900007c008900700000643170190025646400000000000064643e0089
% 00190c89007c3e3164
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb000000000000000000000000000000000000000000d66600
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000099ffff990000000000000055ffffee00000000000000
% 000000000000000089007c000064317019000c3e5600890c890000000000890000893e5600890c25
% 2564257c0c000c00000000890000890089007c000064317019000c70563e00000000002525642589
% 00007c0c257c0c000c
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 00000000000000000000000000000088000000000000000000000000000000000000000000edbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 0000000000000025950c254a3156002564314a4a4a3e7c4c950c64646400703156254a4a3e7c3164
% 313e192564313e646464007031562525950c254a315600256431607c0c95310064646464313e3995
% 0c646431642564313e
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000edbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000003131310000000000000000000000
% 00000000000000313131000000000000000000000000000000000000000000003131310000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000004422440000000000000000008844000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000edbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000033000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000336600772200000000000000008844000000000000
% 00000000000000000000000000000066000000000000000000000000000000000000000000edbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000008899000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000884400448800000000000000008844000000000000
% 0044ccffcc44000000000000000000bb000000000000000000000000000000000000000000df8800
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 0000000000000000000000000000000000000055cc11000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000884400448800000000000000008844000000000000
% 22eeffffffee220000000000000000bb000000000000000000000000000000000000000000bb0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000088cc3300000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000002200000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000884400448800000000000000008844000000000000
% 77ffffffffff770000000000000000bb000000000000000000000000000000000000000000bb0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 0000000000000000000000000000002288dd88000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000339900000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000774400556600000000000000008844000000000000
% 77ffffffffff770000000000000000bb000000000000000000000000000000000000000000df8800
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 0000000000000000000000002277bbdd771100000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000088ee00000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000118800881100000000000000008844000000000000
% 22eeffffffee22000000000000000088000000000000000000000000000000000000000000edbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 0000000000000000000066aadd773300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000eeff55000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000044ccffcc
% 440000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044000000000000000000008844000000000000
% 0044d6ffd66900000000000000000000000000000000000000000000000000000000000000edbb00
% 00000000000000000000222200000000000000000000000b2e2e0b00000022170000002222000000
% 0000000000002217000000000000000000000000000b2e0b00000b2e0b0000000000000000000000
% 00000000005c0b000000002245000000000000888800000000000000000044bb0000000000000000
% 000000000000000066dd993300000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000002600001c55002600001c55000000000000000000000000000939
% 2f420033c4cd88000000000000000000000000000000000000000044ff4400000000000000000000
% 000044ccffcc440000000000000000000000000088ffff44000000000000000000000022eeffffff
% ee2200000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000022bb22bb00000000116655770000000000000000000000000000000000000000000000edbb00
% 00000000000000000000177e000000000000000000000000506700000000225c000000177e000000
% 000000000000225c0000000000000000000000000000672e000000672e0000000000000000000000
% 00000000005c000b2e7300005c000000000000888800000000000000000044bb0000000000000000
% 0000000000001199aa22000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000095500000000095500000000000000000000000000000000004226
% 004c0900448800000000000000000000000000000000000000000044ff4400000000000000000000
% 0022eeffffffee2200000000000000000000000088ffff44000000000000000000000077ffffffff
% ff7700000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000bb00bb00000000774400881166000000000000000000000000000000000000000000edbb00
% 00000000000000000000007e0000000000000000000000002e5c00000000005c000000007e000000
% 000000000000005c00000000000000000000000000005c2e0000005c2e0000000000000000000000
% 00000000005c0000007e00005c000000000000888800000000000000000044bb0000000000000000
% 000000000011cc990000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 3968264c1c1342392f0039554c427b4c0039682f7b4c003968134c263900397b264c130000005526
% 004c2600448800000000000000000000000000000000000000000044ff4400000000000000000000
% 0077ffffffffff7700000000000000000000000088ffff44000000000000000000000077ffffffff
% ff7700000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844228844883388
% 556600bb00bb000000009944008844bb000000000000000000000000000000000000000000d66600
% 00000000000000000000007e00175c2e4500175c2e5c00002e5c00000000007e2e5022007e00175c
% 2e45175c2e5c005c17672200000000175045390b452e672e0b452e672e45675c22225c3945392e50
% 00392e50005c0000007e00005c000000000000888800000000000000000044bb0000000000000000
% 0000000000aa88000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 006800005f09261c6800005f000068000000680068000000685500004c260068004c262626135f26
% 004c2600448800000000000000000000000000000000000000000044ff4400000000000000000000
% 0077ffffffffff7700000000000000000000000088ffff44000000000000000000000022eeffffff
% ee2200000000000000000000000088ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000884499220033aa55
% 448800bb00bb00444422aa44008844bb000000000000000000000000000000000000000000bb0000
% 00000000000000000000007e006700005c2e6717002200002e5c00000000007e000073007e006700
% 005c7a170022005c5c0000000000000b2e227e6717005c2e6717005c2e0073000073392e5c5c5c39
% 005c5c39005c0000007e00005c000000000000888800000000000000000044bb0000002828000000
% 0000000044bb000d35350d000000281b000000282800000000000000000000281b00000000000000
% 00000000000000000000000000006c0d000000002850000000000000000000000000000000000000
% 000000000000000000
% 00680000682f42006809004c0000681c00006800681c0000685f00004c260068004c262626134c26
% 004c1300448800000000000000000000000000000000000000000044ff4400000000000000000000
% 0022eeffffffee2200000000000000000000000088ffff4400000000000000000000000044ccffcc
% 440000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000884499220011aa11
% 001100bb00bb004444228844008822bb000000000000000000000000000000000000000000bb0000
% 00000000000000000000007e007300005c2e6717000b2e222e5c00000000007e00007e007e007300
% 005c7a17000b0067503900000000003950007e6c0b005c2e670b005c2e005c0000730b000b22225c
% 2222225c225c0000007e00005c000000000000888800000000000000000044bb0000001b94000000
% 00000000bb4400005d7900000000286c0000001b9400000000000000000000286c00000000000000
% 00002879000000000000000000006c000d50435d006c000000000000000000000000000000000000
% 000000000000000000
% 007226421c39392f5f261c5f13005539001c72095539001c7223392642001c72135542000000134c
% 094c0000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000044ccffcc440000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844338844663388
% 445533cc40cc110000002288118800bb000000000000000000000000000000000000000000edbb00
% 00000000000000000000228a0b22452e5000225c2e4539395039005c5c5c00672e5022228a0b2245
% 2e50225c2e4522730b8a2e005c5c5c45453973475c2e7350225c2e735022731700225c2e395c2e39
% 175c2e39175c00002e8a2e005c000000000000888800000000000000000044bb0000000094000000
% 0000000077000000356c00000000006c000000009400000000000000000000006c00000000000000
% 00000000000000000000000000006c005d35006c0d6c000000000000000000000000000000000000
% 000000000000000000
% 00680000000000000000000000000000000000000000000000000000000000000000000000000009
% 1c000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 00000000000000000000001133000088000000000000000000000000000000000000000000edbb00
% 0000000000000000000000000000000000000000000000171700002e2e2e00000000000000000000
% 0000000000000000000000002e2e2e00000000000000000000000000000000000000000000000000
% 00000000005c0000000000005c000000000000888800000000000000000044bb00000000941b6c35
% 50001b6c356c0000356c000000000094355d280094001b6c3550001b6c356c006c1b792800000043
% 355d5094005d506c6c286c4350006c007935006c356c000000000000000000000000000000000000
% 000000000000000000
% 1c550900000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 0000000000000000001144444444442200002244444444440000004444444444ad76444444330000
% 22444444443300002244444444440000114444444444000011444444444400001144444444f2bb00
% 00000000000000000000000000000000111100000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000670b00000000225c000000000000888800000000000000000044bb0000000094790000
% 6c35791b00280000356c0000000000940000860094007900006c35791b0028006c6c00000000006c
% 6c430094001b0d94008643356c006c008635006c356c000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 0000000000000000002288888888884400004488888888880000008888888888cba8888888660000
% 44888888886600004488888888880000228888888888000022888888888800002288888888f7bb00
% 00000000000000000000000000000033dd5500000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000002e0b000000002217000000000000888800000000000000000044bb0000000094860000
% 6c35791b000d3528356c0000000000940000940094008600006c35791b000d00795d430000000028
% 286c28940000860d28860d000d006c006c35006c1b6c000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 00000000000000000000000000000066000000000000000000000000000000000000000000edbb00
% 000000000000000000000000000011dd660000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb00000028a1325035
% 5d00286c355043435d43006c6c6c0079355d2828a10d2850355d00286c355028860da1356c6c6c6c
% 35433ea10d6c6c356c286c3543006c001b6c0d6c006c000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000333333330000000000000000000000000088ffff4400000000000000000000000033333333
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb000000000000000000000000000000000000000000c93300
% 0000000000000000000000000011cc66000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 000000000000001b1b00003535350000000000000000000000000000000000000000000035353500
% 00000000000000000000000000006c00000d2800006c000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 00000022bb22bb0000000022556688000000000088ffff4400000000000000000000000022bb22bb
% 000000002266558800000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb000000000000000000000000000000000000000000bb0000
% 00000000000000000000000000997700000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000790d00000000286c000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 00000000bb00bb00000000774400bb330000000088ffff4400000000000000000000000000bb00bb
% 00000000335500cc00000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb000000000000000000000000000000000000000000c93300
% 00000000000000000000000022dd0000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000350d00000000281b000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000002288448833
% 88556600bb00bb00000000000000bb110000000088ffff4400000000228844883388556600bb00bb
% 000000000022776600000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb000000000000000000000000000000000000000000edbb00
% 00000000000000000000000099660000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff44000000000099220033aa
% 55448800bb00bb0044442200006633000000000088ffff440000000099220033aa55448800bb00bb
% 00444422000011aa00000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 00000000000000000000000000000088000000000000000000000000000000000000000000edbb00
% 000000000000000000000000dd000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff44000000000099220011aa
% 11001100bb00bb0044442200553322110000000088ffff440000000099220011aa11001100bb00bb
% 00444422663300bb44000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000066000000000000000000008844000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000edbb00
% 000000000000000000000044aa000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000003388446633
% 88445533cc40cc1100000055ddbbcc000000000088ffff4400000000338844663388445533cc40cc
% 11000000555522aa00000000000088ff000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000000000000000008844000000000000
% 00000000000000000000000000000000000000000000000044ccffcc440000000000000000edbb00
% 00000000000000000000007788000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000011330000000000000088ff000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000bb000000000000000000008844000000000000
% 000000000000000000000000000000660000000000000022eeffffffee2200000000000000edbb00
% 00000000000000000000008844000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000044a844444444110011444444444400002244444444330044ffdacdcdcdc4bbbbcdcdcdcd
% cdc0bbc0cdcdcdcdcdbbbbc4cdcdcdcdc9bbbbc9e6ffffdac4bbbbcdcdcdcdcdc0bbc0cdcdcdcdcd
% bbbbc4cdcdcdcdc9bbbbc9cdcdcde6ff000044444444441100114444444444000022444444443300
% 000000000000000000000000000000000000000000bb000000000000000000008844000000000000
% 000000000000000000000000000000bb0000000000000077ffffffffff7700000000000000bb0000
% 0000000000000000000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000004effffffffff440044ffffffffff000088ffffffffbb005cfafffffffff7ededffffffff
% fff2edf2ffffffffffededf7fffffffffaededfafffffffff7ededfffffffffff2edf2ffffffffff
% ededf7fffffffffaededfafffffffff70000ffffffffff440044ffffffffff000088ffffffffbb00
% 000000000000000000000000000000000000000000bb000000000000000000008844000000000000
% 000000000000000000000000000000bb0000000000000077ffffffffff7700000000000000bb0000
% 0000000000000000000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000044a844444444110011444444444400002244444444330044ffdacdcdcdc4bbbbcdcdcdcd
% cdc0bbc0cdcdcdcdcdbbbbc4cdcdcdcdc9bbbbc9e6ffffdac4bbbbcdcdcdcdcdc0bbc0cdcdcdcdcd
% bbbbc4cdcdcdcdc9bbbbc9cdcdcde6ff000044444444441100114444444444000022444444443300
% 000000000000000000000000000000000000000000bb000000000000000000008844000000000000
% 000000000000000000000000000000bb0000000000000022eeffffffee2200000000000000d66600
% 0000000000000000000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044dd551100000000000000008844000000000000
% 000000000000000000000000000000bb000000000000000044ccffcc440000000000000000edbb00
% 0000000000000000000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb000000000000000033330033330000000000000000edbb00
% 0000000000000000000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000002600001c55002600001c55000000000000000000000000000926
% 5f000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 00000000000000000000000000000000000000000000000022bb0022bb0000001144aa0000edbb00
% 00000000000000000000008844000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000095500000000095500000000000000000000000000000000000000
% 68000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 00000000000000000000000000000000000000000000000000bb0000bb0000000000bb0000edbb00
% 00000000000000000000008844000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 3968264c1c1342392f0039554c427b4c0039682f7b4c003968134c263900397b264c130000000000
% 68000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 00000000000000000000000000000033228844883388556600bb0000bb0000000000bb0000df8800
% 00000000000000000000008844000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 006800005f09261c6800005f000068000000680068000000685500004c260068004c262626130000
% 68000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb99220033aa55448800bb0000bb4444220000bb0000bb0000
% 00000000000000000000008844000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000008888000000000000000044c4d6bb00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00680000682f42006809004c0000681c00006800681c0000685f00004c260068004c262626130000
% 68000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb99220011aa11001100bb0000bb4444220000bb0000bb0000
% 00000000000000000000008844000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000008888000000000000000011ffffaa00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 007226421c39392f5f261c5f13005539001c72095539001c7223392642001c721355420000000026
% 72260000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb338844663388445533cc1133cc1100000044cc4400df8800
% 0000000000000000000000aa33000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000008888000000000000000000aaff6600000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00680000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000008844000000000000
% 000000000000000000000000000000bb000000000000000000000000000000000000000000edbb00
% 0000000000000000000000dd00000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000055ee0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 1c550900000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 0000000000000000002288888888884400004488888888880000008888888888b7ccbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbedbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbfbcd44
% 444444444444444444445dcd44444444444444446944444444444444444444444444444444444444
% 44444422000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000000900000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000011444444444422000022444444444400000044444444443300000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cded88
% 88888888888888888888b7c88888888888888888df88888888888888888888888888888888888888
% 88889988000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000011aa0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000dd220000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000077ff2200000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 00000044ccffcc4400000000000000000000000088ffff44000000000000000000000044ccffcc44
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000008fb700
% 0000000000000000008888000000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000008888000000000000000000ccff7700000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000022eeffffffee22000000000000000000000088ffff440000000000000000000022eeffffffee
% 220000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448800
% 0000000000000000005500000000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000008888000000000000000022ffffcc00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000077ffffffffff77000000000000000000000088ffff440000000000000000000077ffffffffff
% 770000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448800
% 0000000000000000000000000000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000008888000000000000000033a0c88800000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000077ffffffffff77000000000000000000000088ffff440000000000000000000077ffffffffff
% 770000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000448800000000000000000000000000000000000000000044ff4400000000000000000000
% 000022eeffffffee22000000000000000000000088ffff440000000000000000000022eeffffffee
% 220000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000022a0b755000000000000000000000000000000000000000044ff4400000000000000000000
% 00000044ccffcc4400000000000000000000000088ffff44000000000000000000000044ccffcc44
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000003300000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000eeff55000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000444455000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000044ccffcc44000000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000088ee00000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000066330099440000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 000000000022eeffffffee220000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000339900000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000055550088770000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000069a000
% 000000000077ffffffffff770000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000002200000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000aa220000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448800
% 000000000077ffffffffff770000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000000000000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000006633000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000069a000
% 000000000022eeffffffee220000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000333333330000000000000000000000000088ffff4400000000000000000000000033333333
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000553300330000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000044ccffcc440000000000000000000000000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 00000022bb22bb0000000011665577000000000088ffff4400000000000000000000000022bb22bb
% 000000001144aa0000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000055ddbbbb440000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000333300333300000000000000000000000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 00000000bb00bb0000000077440088110000000088ffff4400000000000000000000000000bb00bb
% 000000000000bb0000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 0000000000000022bb0022bb00000022556688003300000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000002288448833
% 88556600bb00bb0000000099440088440000000088ffff4400000000228844883388556600bb00bb
% 000000000000bb0000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 0000000000000000bb0000bb000000774400bb33bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff44000000000099220033aa
% 55448800bb00bb00444422aa440088440000000088ffff440000000099220033aa55448800bb00bb
% 004444220000bb0000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf22
% 8844883388556600bb0000bb000000000000bb11bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff44000000000099220011aa
% 11001100bb00bb0044442288440088220000000088ffff440000000099220011aa11001100bb00bb
% 004444220000bb0000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448899
% 220033aa55448800bb0000bb4444220000663300bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000028280000
% 00000000000000000d35350d000000281b000000002828000000000000000000281b000000000000
% 0000000000000000000000000000006c0d0000000028500000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000003388446633
% 88445533cc40cc1100000022881188000000000088ffff4400000000338844663388445533cc40cc
% 110000000044cc4400000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448899
% 220011aa11001100bb0000bb4444220055332211bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb000000001b940000
% 0000000000000000005d7900000000286c000000001b94000000000000000000286c000000000000
% 0000000028790000000000000000006c000d358600006c0000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ff4400000000000000000000
% 000000000000000000000000113300000000000088ffff4400000000000000000000000000000000
% 000000000000000000000000000088ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000008fb733
% 8844663388445533cc1133cc11000055ddbbcc00bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000940000
% 000000000000000000356c00000000006c000000000094000000000000000000006c000000000000
% 0000000000000000000000000000006c0000009400006c0000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044ffccbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbddffffccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbddff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000003300000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000941b6c
% 3550001b6c356c0000356c000000000094355d280000941b6c3550001b6c356c006c1b7928000000
% 43355d0050945d506c6c286c4350006c0000009400006c0000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000033bbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc9bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000
% 00000000000000000033bbbbbbbbbb000033bbbbbbbb88000066bbbbbbbb88000066bbbbbbbb8800
% 0088bbbbbbbb66000088bbbbbbbb660000bbbbbbbbbb330000bbbbbbbbbb330000bbbbbbbbf4f7bb
% bbbbbb000000bbbbbbbbbb330000bbbbbbbbbb330000bbbbbbbbbb330000bbbbbbbbbb33000088bb
% bbbbcdb7000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000947900
% 006c35791b00280000356c0000000000940000860000947900006c35791b0028006c6c0000000000
% 6c6c430000941b0d94008643356c006c0000009400006c0000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000948600
% 006c35791b000d3528356c0000000000940000940000948600006c35791b000d00795d4300000000
% 28286c28009400860d28860d000d006c0000009400006c0000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 0000000000000000000000000000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000028a13250
% 355d00286c355043435d4300006c6c6c79355d280028a13250355d00286c355028860da1356c6c6c
% 6c35431b28a1726c356c286c3543006c000035a135006c0000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000a8c800
% 0000000000000000000000000000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000001b1b000000353535000000000000000000000000000000000000000000353535
% 0000000000000000000000000000006c0000000000006c0000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448800
% 0000000000000000000000000000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000790d00000000286c0000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448800
% 0000000000000000000000000000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000350d00000000281b0000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000a8c800
% 0000000000000000000000000000000000000000bb00000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000003300000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000443355000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000338800bb330000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 000000000000000000000000000000000000000000000000000000000044ccffcc44000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000112200bb220000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 0000000000000000000000000000000000000000bb0000000000000022eeffffffee220000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000116677000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000008fb700
% 0000000000000000000000000000000000000000bb0000000000000077ffffffffff770000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000099550000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448800
% 0000000000000000000000000000000000000000bb0000000000000077ffffffffff770000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000077770088880000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448800
% 0000000000000000000000000000000000000000bb0000000000000022eeffffffee220000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000445511bb220000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 0000000000000000000000000000000000000000bb000000000000000044d6ffd669000000000000
% 00004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000114400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000003300000000000000000022bb22bb000000002266
% 55884488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000000000000000000000000000bb00bb000000003355
% 00cc4488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 00000000000000000000000000000000000000000000228844883388556600bb00bb000000000022
% 77664488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000888800000000000000000044bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000cddf00
% 0000000000000000000000000000000000000000bb0099220033aa55448800bb00bb004444220000
% 11aa4488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000066b7b7660000000000000044a0c88800000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000069a000
% 0000000000000000000000000000000000000000bb0099220011aa11001100bb00bb004444226633
% 00bb7688000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000088ffff770000000000000022ffffcc00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000448800
% 0000000000000000000000000000000000000000bb00338844663388445533cc40cc110000005555
% 22aa4488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000022ffff220000000000000000ccff7700000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000069a000
% 0000000000000000000000000000000000000000bb00000000000000000000000000000000000011
% 33004488000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000cccc00000000000000000077ff2200000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000011444444444400001144444444330000224444444433000022444444443300
% 00334444444422000033444444442200004444444444110000444444444411000044444444daed88
% 8888888888888888888888888888888888888888df88888888888888888888888888888888888888
% 88889988000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000776600000000000000000022bb0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000022888888888800002288888888660000448888888866000044888888886600
% 00668888888844000066888888884400008888888888220000888888888822000088888888e2cd44
% 44444444444444444444444444444444444444446944444444444444444444444444444444444444
% 44444422000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000111100000000000000000000110000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000666600
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000001177cc000000000000000000000000000000000000bbbb00
% 0000000000000000000000000000000044bb66110000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000077ffffffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbe5dfbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcdffffff7700000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000002288dd000000000000000000000000000000000000000000
% 0000000000000000000000000000000044cc77220000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000026001c55
% 000026001c55000000000000000000000000000009392f4200000000000000000000000000000000
% 00000000000000000000000000000000000000000000000026001c55000026001c55000000000000
% 000000000000000009265f0000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000955000000
% 00095500000000000000000000000000000000004226004c09000000000000000000000000000000
% 00000000000000000000000000000000000000000000000955000000000955000000000000000000
% 00000000000000000000680000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000003968264c1c1342392f0039554c1c2f7b4c3968
% 002f7b4c396800134c2639397b264c13000000005526004c26000000000000000000000000000000
% 0000000000000000003968264c1c1342392f0039554c1c2f7b4c3968002f7b4c396800134c263939
% 7b264c13000000000000680000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000006800005f09261c6800005f00000068000068
% 000068000068005500004c2668004c26002626135f26004c26000000000000000000000000000000
% 000000000000000000006800005f09261c6800005f00000068000068000068000068005500004c26
% 68004c26002626130000680000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000680000682f42006809004c000000681c0068
% 0000681c0068005f00004c2668004c26002626134c26004c13000000000000000000000000000000
% 00000000000000000000680000682f42006809004c000000681c00680000681c0068005f00004c26
% 68004c26002626130000680000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000007226421c39392f5f261c5f13000055391c72
% 090055391c72091c3926421c7213554200000000134c094c00000000000000000000000000000000
% 000000000000000000007226421c39392f5f261c5f13000055391c72090055391c72091c3926421c
% 72135542000000000026722600000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000680000000000000000000000000000000000
% 000000000000000000000000000000000000000000091c0000000000000000000000000000000000
% 00000000000000000000680000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000001c550900000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000001c550900000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000
%%EndImage
%%EndPreview
save countdictstack mark newpath /showpage {} def /setpagedevice /pop load def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -Pdownload35 -T
%+ 16.020000002980233cm,5.280000002980232cm tmpPSFile -o
%+ /var/folders/9b/b810lcpj4qb5f1w9fppzlbqj8c0kn8/T/latexdraw/latexdrawTmp15942324743178735/tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.07.08:1321
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E70A7911CEF46D4A4074EBEC25F55A638011A4E0F2D07A01A042436C62962A50
973F9AB79BDDF1747CA2F970953AD5128331F2715D093DF035D882BFFD0E0C65
4D9E97727C8B4CC50778EDDB5E0A210C9E0A9B95B37EDB25A80BF2A045583389
847B65D114CAFF0FCF67585A6BCBE22DA41D479902960F7C0D013CCE81F60F3D
DF36E91F8276940F08464405DF7352069A414D615BA09E156C449C172832EA2C
E38EA97B9A576B444E00C0B19C9E751336898EFCD4847F7B5095BACD95228E1F
6EDD85621B9643624E6CE80610BFB320B3D0914BE2359C910FCEF969AFD599B7
8545A1AA4E33EF3F14EDECCFD82F9975DCD18BC1B687408F072FA39164340543
5A09C1257CF81A066CBCBA4B3FCF3BC8D6A3496230AAF1232518D07135C7823C
AC45513B2A9911B39603B415168A1FFBED834B271794C994A3F9821E4E9B9023
B08C7CE8D31B5FCFBBFBB71AE71A47B9E18E48F5BDA5D89F2EE08A2784F150B9
180ECCCC77586E39586DB7CB534D1806D9A3A0D376856B2036634A72710FC8DA
959A66289DBD2D073A400E7CA0B870EE6EBF02A0707CEABD8D44A32F85209065
B61A9E7C56EEFE751F19938EF2050F231708623163ED2DB636BA33208269330C
24A4E0B645E707523349225E6B8EB758ECEDE8173B87B4AE6A33F17030AAA7B0
A2CEB87A0360124FD1504C60DE14C8EAAAC52FF900289981316BC60E07B9A6F3
40CECD891D8706212848304E170D27F17330A29CFEA10E80FAA7A0837A0DD1EA
D10B0A7A3F70DB740709CF3330E44DD04F6367E04C3CBB3400BA3C1943B874CF
B4B611D58AD532395FD31FDC361BBAA07179A3D6215C9819796ACC66B0571229
E5D0EE470B9811A0F3B2A4D09B78866901235C66B0B7591265D226C571F25415
55DF310B9923F6206B6845D9D4835F7F36499A9C4BC39F35AC5F1F4360654A09
D9049D73DB6FFE7FB882642CB8D369C6F870BCA1E1753FF36E4D58E1E10A9648
D098A3FEDACD1A2C502230FCD961D0CCA425E6DED4A66CDAA69C13C313F273B8
54D4B38FD38C1237142EC3575FA9E198685DBE5378D15F1D89ED4C66EF889DC6
EF388E0ACA1F6A267698CD7416DA2E1F8856252FECE069AA22E1345C3AA7A862
B5D9F6C145821B542ECC97DDFB5C3F91A48902DBE443532733EDE19437423672
A26BEF4B7990CD8751D2BF482FF03A3F7AD1431AC2F83AB9B2AE075C2FDE91DF
AC891F53D47E3ADB78968F9BAADBC65855829E54045A3842D213AEF334C48922
6198A349B895E8A97938547B5CFCDC34F8F5AA3014AB2392A06022989DE716D0
D758B5E2B2841CABB66AFD2B4F7AA97A3CFA028D19D4D08706830026FD7F5D8E
3A190E6BF36508F7A980617D082D56F3F2ED1033A0D5B228F3E77763308B93EB
5958548EC62CC02E8F072FE44DA11BEB658F57C2926FD2523CC7818E2B1534EE
3F51F08DFEFE06F9787819741B4076FC20CE1548A7120FE4C92707CADD91332A
2E42DE532959E938B4F178737DB31E1D4F14D8A9AE9F8806BCD2D2784FB4F9F1
94547083D2D70F1A7E35AFAC5F34BCC5F2B88EAB0F95D64257D2164092A4FC8A
45737A5FE1A6FCCD2AAAA48746B54DE0468AE1029536E1CC26FC369CEEA40FFC
5DF3ECF457A8B546F2EB5A4BEAF20F716AAFCE14642ED1258074FD8A60143CA1
41E2FB81D79F801EB99C18D00A0F048798E4A0968C4B31A367E133F61C751A4C
89F498EA9E0F699134064C82724C97E21FAB41065F56324C94D4BA66B05789DA
D4731B3409C63DFB951C4C5F0E0904CD9019197ED8128B99EACC7F652F12AF66
8149DEEB3A2EDE1D8097F833FE22590924E30F19A16F3D0CE3672EFFF145BFDD
9AF27A77F56E22256ABB590CC3B7F24A90A8212787094DE8A269D89B7E7CB748
7C7118333A458570892B3681501A6C0F317D65C2B6189C0D70512A0C420505D6
1846873C2A39FE567513D5CB9766BCFD5A7F965A3B9FEC97EF45E92C0576E52E
9E5B04AD1681880B3E8356E9B2B3CFC2A384468E019E685980A23B5016A3AFA5
94FCCF2ED93B459EF439BC55089A0A9F0DE642A98FF5EB3B9A2469C69EFC302A
2536C120E2457267CA607D9AAE1446CEA1DD63D8F430221B1682E026F6AFB67D
38536EF0E612987FA331C9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 74 /J put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
5D2579DAAEE12528C23ED8A1A2F34CAD1CE8BA67D0B660E9281F247EC10F816B
FBD6B9E8AAAA1DFCC4C9FF1C6AD05C0D776DBF675838C2629826D5337EED815F
4268604A4EED01A2C7842FCAED2E37F7F39F980866DC5BCACA8616749FFE946C
A0AB0475DA734C00D99912C544BD31F8A69367D068F0A18EE79FBD4D5385B8C1
DEB92502ACB3B657A54C9BF786D7DC1ACABDF29591D77ACE1D4FE00E935D2858
3733656C79DD1C174C26DD97D462B4323F33B410DEB64244095927C572FA90C6
4C8B709C5B7E4386AEB936C2656B59AAFB74F9E40E680D890903458CB1B2AB8E
6E629F88B51546877F7799B99DECDC13638E2765343988DE2ED33279DEC3FF0E
2255A734F5925608991F068274CB1E5301C5B8623C5878851857B3E665490A7F
FCE5A8DC0FFCF3D56BF55E4AB2ACC6743F52B59C1343A1C25BD46A6A3722957E
23E338A655247C509A950BD2C3ACCFCBCF71FFC6250ED19804608CC65AF016A2
3530626089978C8EBD95E8D6625C61442D7AE3543F3EC5C349D20D4CB094FA0F
303CF01A99B76A91246CE10002385E5E728711F50F406270CF873290E99A3BD5
06A8578376F788CB74E9751049301D6D600224EDE9B574517228E3E455B977A4
97915342A184DA5589E192F08B7149CBBA4E46A7254B32756000AF03E9794312
9A8A6FB15CBD8942A13927989ADB385BDB052206F0419C55E36B48679E851807
4632F6BB0639E2AA1DBBF34708FDB8092AF08079CB5D0CE2CEAF2D85E987DD9F
BA00895D862FBDA0271C331247360B7F2CEE58AD9CEF1B325F612615E08504F5
25DF166B4F587AE41977105175EF70D94999323D8B4FF8129A8EEC3900A00CCB
026E6948935A7C6B45EF87E654F8A53BB2B27CC6598D0FAD13B2983B3699B3C7
97D6C698E14E0DF7167D12F3720901781A6CF4FECAA0892F95549FD9905D7C7A
49D6A82822CD3AA19C434AFE046796B89912BCD0871BC4E98B1EFDF083A5E8E4
390776A70F26F59DE8E8DBDFBBBB34E3B0D8C1A90D72D46C9083406FCA278DCC
38682E1B462AE2FD97E22E6DF3012A6DF8063C140142EE927CE5E60380DE705D
E3D2772F46B84E900760681E80DC303260295DB5409FC607B39791DF3AAC55B7
17F022B00F0F89FE477C2413107949E282034B7A619AF258468BA4A42FC33DBC
F17D4874E909D493338CC250F9AAE458E2B4A70EC98F9D7C7056CE1926A449C0
370C35C4DDAFB83D7308AB15D0C890589C7FFC9F6E718114046F46C1967F9E35
573068F3D8048BF0179451C84FE2CC5A9B5F86F136B2515ACF4D5385BA128D45
BC7C961309AA3C59061728EFB3E1317CF247224ECF9FFD37BCC3348A527EE4B7
681DE25865DD5159CACB293FE23FEEE142E628F7D0CAF26937B4FA3A237101EB
114A773AD6703CB06FD147A2003BC90EB0899A6B545170EB6DA5C948609ED4CF
766665B82189DD378E6BD681F01E0CBB7EBEBF18BAAC19D1D496FEA5FA7AF153
4A4C67C6324047308F7F96A8D3F46BD30A7CA2F279276A18F8A65EAD4E0DAD84
79868D3FA2D822BFD82BE007D82B221F5B0C33230DF2369ACF7EE99418883AFA
D06ECD6116168508E8B227A0DA96A502BC592C6C76399AF55057F1A668F7137A
8CD04E0150DAA08013625A9BE3FE736049A4AD8CD668493AC49D14B01CFE349A
ED0167FE36D82D59BD570B4407957992B611F70D08E8929D70140983129B366A
8F2005ECCE7B2ED90343D23E006ECB2828444D0A77BAE28D7E749E011F374A28
8D4BB503583CE722D09785408DF04F04C9218D31ED24A5AF0600052E08B1190E
191E921521A4BD6E4A678BD8857D176A41A999E8ED6A11315A7926538D22E485
4A274C747EFC1C2921B15AD68CAD72846FB5068313E89BA11B9F05A8E67A3FDA
799F40F541FF2DF0E7AD1E993050B4BA7A664AB5EEFC7B820575D35624FAA504
892ABBF97FAEE362E25ECE20563520EDA59B1AEFB4D8EB2F9D06329F3000E1BB
3AD46462B8DD917347D73B1AFA0D4B6A8F9CF119A2972186BB50BF0445AC800F
995F74E99F633602CAC63E23E2D31DE77FAD5B6DC764101CD44B659DD58861B7
C27DB3C3CB48607AAA9BA2EE12256B13481B59AFB505D04BB5217E590D6F3859
72ED96C827AAC0BBE73D7C36A0B32FF9DB2378EDC20E233DB1C4888FE4D362C1
ACADE0A796E2F10372F7A12DD63A31E7DC41D01114851B16470446002CC00772
293F0A5DAD7DB83A9EC640CFCF6BD759FA9BF30619796D9641D7AFEA6F782C18
AC00A090E507817CB51E35A5F135DA7280B97A6F859FEA9E3D8009F30C45FF84
D81D81696F1E5971C6213FB324F3175625F4966B227DE5B73F08235D33B627FF
0790194130AB2F1EEAABA6785D30B1B50F112D44AD52F8021D9CD76BEED158DB
3BE23FBD776828399ADDAE4EB5A2DD55AF653C2CAD039D748E6C108FE9FDAE7A
645DBDE2BCDB6154C9419CD293E842805970AD9AD5BF7316E46E4D1BC8DD266A
83C64CBC0626568EE66832706F7D742F18BDFED36AF0A46945F3F8B18241C6B7
C9D9AD96CF927B6E1875A3D00F7DCF79734B9D2EFCA64B8079DF91F8E6BDF867
4D52F1112FBFC74DBE3A33473B669E1398EFEB02831CE6E44FBC799D9561E3E5
37D6420A18833F15BA4462854A637FBC58A340BF22FFB87D29632486B34B5866
A3F12237D5222C3184D476F78799EF03F4333426D291A05DBF9BD24FB1F2B7CE
793E614BC06D6BCA6DACA125D000581E0C2CAE25CBBAFFA7C78202CBDAB10E85
56CDC258357956F607DB7BE5693111E5568188A0264C6A7AF607A6AB0880BBBD
9A252A9C00C7D7D6ADBB35A91CCD3F9044765725F8F36608AEDB4989E19C1949
6A43EC8B819ACBF76BA4C5AC734CB43B4C46780B458C8B7A9BBF542F01CCD19B
8E5388D7B1809EE510446B91EB389BEA7E2EAF75A7B6318B934836F0EFDE8545
0420C3D149EAA8BFB8C37904936986E3970C5D1B8DEC16767A5A9D1EE60BAC40
3AE7C20DCF53A060F37F6B4AE40E054E4693CD76EE4F654D4DC3604BB860E01D
4CDDFC2E9B54B746D4C967481367FAA24931EB8875ED7A597BF0B81C71F77B89
7AAAC11D8223960B9929CB2DCA3DD657D35122CC06791ED3634C68026AD56E10
7DD17112EC8BE75D5413CF18229077A13803140F532FBA68C4C18CF296B90B5D
5263445DC858DE9AF14158607F4730DE8FC6D2E70E583F9DBB5E5FEF4C3B66A0
16DC5FCF9E96D870C3189D40883949E638FCE4FC3629EC482A086DEA92AF0ED6
DBD2A5974B544DB6054321A98DD70279EA8E84E9BE517B6CBEF272A3653677E0
448750234325C00F406C576EA64FBABC16E356B6AE1E7CA5DF5ED2BBE0165A77
50625E094ACE8294A633662221E1EB8A14C4F5469B1C78F6D6FA83DBE8C6031A
8E2158A3A3B315CCEA772A9BD299EA0AD8B5C109617BFCA1E123D4759BD3777C
6D6A198132F311B70AE10EAFEA965B1FE24639E4F1CB17A486758A1E4DBCCEB4
9BD9CAA3EC64C599F2C853DCD26C294700FD11D41AE1A078C57140C78E18F27A
08C00471FFE8BAFFC0F792DEFE09F04D4E0BFF47F412644A3F12EDD17FE09FD6
D91F1CB3A6D632E80B8C8282C6CF32C640B7598EC52D621AB7C9044FA8F9AAED
90C6AD02A0CD025874CA98958F2E685560C41AB67FCF18591FAC9B3770D825AF
0D34B3F3DEBF2FA143311EC892D1BB37AF6D588B6D90B79D816A6E4DE1A2ECCB
AAE8C2FDEB0ABD9B32E97D471161555D35A83BFDCB1E759FA6670EB8D444A0C8
F470E1C978231D61F483D8A36502FFA49D51829AAAA7E9E625C544172DFB1B70
CEB7929E5E5E9BDE3252972D7B322C60FA82D7EC543CCFFBECBA5CA15E789900
D1406070CBE980F7C0375B8019E1008B484B7312044815A145A7BCEFF078120A
8E8D4F62716C15F009C44D023AEC14F3FAB651A0F8B7F02216F734D55E648695
E071C3EB7F9012D7C13B6549605227CFCF1D152D294D66B672BC90739B5CFF68
DD6A1EE795AF199D7A6D1861B42C947337F187E886B5124D38A9EE7030368B2E
67E073A60C4EEFD68856640F2514CFEE0EF04095145E2C97192E8E1F0AE8751D
E9148CDFE8D2FA26C76778AE7766FECB16DE6EC9497507EE95C73F80BB0E7906
776B5329AAEFC552AEA8D3FC7FC2E8844476CF8A9D67F4913C23E38B02A9F259
DB9F19E57A2073017974B8DF02A04B280B1DB9051A4E64F3EE21ADEB4698607D
0B08E7DEE840745B24BC94F6E7D5D8842C8B66FDA9719EF4DB1C88BDF6D9B8FC
333C3F1922DEE3F9C1CCB7A139268479552A5D4FA17858A966E3EA8E01B88F85
A05961224AB157CFD980FF0F5D464DF085BA95D4AB4A42FFEC58504A19AF7443
3633E4D0FB6628530CE4D7C25CC9E9DE85A121CFAF9B9111981EE203A8A1CF7C
0A5C1BDD3B22D80EB95C5796E2906CCE87D66FAEB285C629420A212D5F3E771D
03B3D5FB0C021F949E03404AB49F65DD577C9C65D7561A64568015C6EDF40EE6
2A93A40DF29EEA1D865DDFA92E72DACF6D6A1506CE5E84967998FB6862FB5FF5
8238FE5AADC62472DB4D4AF6B649652C96E73804CCB7FA85D19032F821C03206
CA38D7BF1439DE8260CA8DAB79EE4F980746F0500394FEFF2B9BE84F41D84E31
21154D9F9C459BB7CDCBC1563D6BBEE528B02FC2ED707FA19C1735628D44C45A
9AC9A83BABBA8BD73AE1E7A28BBB180852F2FC7EF68198C5AD355E9703FC4FF9
CC007BA43824B4763F8A3B32C9C842B8BDEFE7565AEA5BA4F2952DCC9843C753
3415FA966E5297FE85EA45A0F742926B0C06B52F88C51F5E92186BC839C15A39
8DE51F1868AEDD2E505FBDAC89F93B5F2C93E3DE4D21BFFDCB2CEB0995972FE3
89173E99EFFBD92F3CB269375D0D1935291AC5F979843A6CFCE5D76CB61759F7
849F5FB11D35A24A4E998324276927840E712819E62F236A78152D019EA1A3EB
6696A257D32B216D559A443AE9EB61A5C1C4473F34588DBB39168AC5FDD51CBD
F0B5FEB91B6EB336FF3FB251706B8CF595F0257B776B472E4C5F6F26597F64A6
7DFABE2A39427291DC68242D6B386E7AF8B2239D11518C38C1154CFAF223EB2D
618D0758266060A6404335C84BD25723960BBDCD0BDE2D32B682A90345AB5DB2
2C992D0DF70BBB95ED5E1F6A21C4C7B9A77DFE59C6BACE175A6354C5C30BC357
BBC9E968CA20AC99A4C0B10980C11FE3AD2B637E1873E7DC675BDCC6511E06B0
C86D29DE537998A26AFE8A41D64D75FEC16E345C29B8FCD4BE8A4A24EA332459
BFBE20CA1749F39BC1119722886DF3428C50BA196B8990D37E7B26922C701781
0BDED3A4AB17DDACB0B578BFB84D91C692F390A4359AB4A42620684797FE9D3D
3D6442B2CC007C409CD40E0675E288A37FF6F1214A9F8CFFC8ECFE06AC8D913F
FC1CE670559417E086A0A8AA5C85332B5D5AF4896C4A3DAA1EE16097C7C8A9FA
CC9ADC02D97EA771FFB23A31CFD72071CF9BB27C25AA94BC9A363DDC838A77BA
9E974A645946349950588E185A96B760572C81705B73534F853E3BCF454ACF21
534E25ADD1F9361555273F001D51718A417DAA97D689BFB94941B6FEF6FB068B
E030BE2D62EF935D26EC33399CBD9AB9CFCDC371DF9AA68B953A4FA34BA09BC3
B07F3B9898BF502CB60094C182881166C2CD3F82156B2866A13B1DF03BBE45B1
7DD05E45E07B819615D64AB02D3CCA119B9938D3E04C8A11362D990F018621C8
AFBE79302A48DD7D7F09262A643168463A72D0026E8A6259D7DF94B87DE75F33
7ACB8A0605B5A1B0F8BB466F594A492DF2A4DD2441B8021B88A22C492C29F770
8ABE4D86C26797B3B41FB79BA2A3C17B86F9C15C4A13660F9CE85E95A76734AE
C487BBB1A0E960F410D4797B2F16070FFBC01E03242EAB549D268BD42117663A
AACFC612FE02329B200A0B86F5E86984032216FA7DA99ADE2E4743BD2D351BF4
45A09B8B2D39C5E0F3B9AE25333821EE43786BADB3DFEA18BF895612FA0DDADA
C1F4F79DBAA1124EFD4654EFE6B95C60C8ABA56DDCE77A3B794AC6D7FB1D4898
B6DE62566DC837A28F7CBFF0D753DB66401F11D41BB0FBF74D9ABEB8043BE72A
E43F3BE5C2E6BE4540CF1B6145BB57DCB610ED1518D0633AE276CCEE1A238266
9022884C6782484DBECF87533D65AD5D3804F1A48FBC9FE3DBE17BFEEF96E7FC
15876DFF886A047D930AC6369A89CC3466F420738293B67FCD09992D8746A43E
60AB4E599B7DDC9006E6D492014627D1B58D76CEB2B46D1F6E6495ECEF3107A3
968599C0885C84935566857AC1FA0BD76D9A2D450A755AE4979D0268EC9EF3CA
1FF3EBA892C9D94BF38980F84F1CA95324D027306A2538FF64B535960C95B30B
8E3377C036C8D2543B658D2E64A02824C0D0EBBC2479E56494453DF6A84ABB47
86623E8B4D1748C04D0F1B3F99511D5CAD3BA29485E1E0E9ED0240565BF9068A
A33D9E1051D5E4C094B045C11CCCA082D0015378B07596EE11880B7825101D3C
B4F99C25BA474358EA016A586610F69578C3F7F6657370CAAD4A9C8A34220AD0
BC9E831F6199EC46B0E0625E1B8C4932FA05FD99CE55545D017C6126E274F8B9
31E9C3CB408E11128AE836FEE96B0EF3023E94B94D96AA7BA2A1AC933D67B4AA
F1F67457CFD78D25437824D44D194228D3C5A27F7CF5C1443B63AD0C9CE901D2
A49A6FAC62C9791BA3D6522C664C25F969EC871A4FC5AE318EC2BD95816B897A
78AAB953E64CEFFE6822F5C2F9B58DED82DEC3140B11659AF05623FDDA9B495D
FFA93EE2961DD98D1F921010AADE0342A7A7F569D031F7EB95A02F86E9BCB68A
9BC7E89B8FD201F326BCEA090BF668B7E4D402DBD48F44D4829D8DBEAE63ACA9
0E219A670E75909263D5DE48471E31DBD28C727F54EF4CF82F8BCF5D8FA2DDD6
4CDF3BA762131CEA0AAAA0DBB2600FB38280B090C3B50E1EE0ED40433640B24F
4ABEB74ABECB90816DF870F423F502190B33C83C1D28DF869C56EA3D81F27ABB
EE12FE9ECBE8DDA4A4024D90E1B35BC7CF0517A3A493BB99BE2CF7751D08E2D8
C45CFA53309AEE867216F02785DADC7C67754DE71DCF48F5B4D376C2D6DA7BAB
88BF8DA11C97839F6E8F5AAD0A36B1AF2D3E5A841FCAA057C7CC81B88213979E
564180E282B4741BD968AB745A6CA322C7D1729DBD108576B9A6AA231948EE97
230E1EBA87B7AEEDFDC11768F3D6AF05095643C55CCEA19C3DCF67C077CF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
TeXDict begin 29872174 9845510 1000 600 600 (tmpPSFile)
@start /Fa 204[42 42 42 42 48[{}4 83.022 /CMR10 rf /Fb
133[34 5[30 30 30 1[43 38 43 1[21 41 1[21 1[38 1[34 43
34 43 38 3[21 1[21 16[39 22[38 38 38 38 2[26 45[{}24
74.7198 /CMR9 rf end
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -595 624 a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end

-595 624 a -568 24 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 102.43004 41.54118
68.2864 7.39755 .5 Frame  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 102.43004 7.39755
68.2864 -26.74564 .5 Frame  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 136.57324 41.54118
102.43004 7.39755 .5 Frame  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 136.57324 7.39755
102.43004 -26.74564 .5 Frame  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 159.33553 7.39755 45.52455
7.39755   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
45.52455 30.15984 45.52455 7.39755   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
45.52455 -15.36429 45.52455 7.39755   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 85.9274 -9.10507
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 118.36351 -8.5359
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 85.35823 24.46938
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 119.50143 25.03854
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 239.00287 41.54118
193.47873 -3.98335 .5 Frame  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 284.52744 -3.98335
239.00287 -49.50792 .5 Frame  gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 239.00287 -60.88884 239.00287
52.92212   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 204.29048 30.729
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1. 
scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565
2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave
 1. .setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565
2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave
 1. .setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 } def /ArrowInside { } def  [ 352.81384 41.54118 352.81384 -3.98335
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul
add dup 1.4  mul exch 0.0 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-568 24 a
tx@Dict begin { 347.69255 64.30304 } PutCoor PutBegin  end
 -568 24 a 0 0.4 0 TeXcolorrgb -15 x Fb(globl)p
-402 9 24 4 v 29 w(base)p -228 9 V 28 w(blo)r(c)n(k)p
-23 9 V 28 w(size)p 0 TeXcolorgray -568 24 a
tx@Dict begin  PutEnd  end
 -568 24
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1. 
scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565
2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave
 1. .setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565
2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave
 1. .setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 } def /ArrowInside { } def  [ 352.81384 -49.50792 352.81384 -3.98335
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul
add dup 1.4  mul exch 0.0 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1. 
scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565
2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave
 1. .setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.0 1.4 1.50565
2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave
 1. .setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 } def /ArrowInside { } def  [ 341.43292 -49.50792 341.43292 41.54118
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul
add dup 1.4  mul exch 0.0 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 341.43292 39.26492 349.96883
45.07086 339.15665 57.51329 347.12338 63.7343   false /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def BezierNArray n 1 eq {
pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub 3 idiv { 6 2 roll 4
2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos} {ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /ArrowPos 0.  def
/loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo
cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t
0.95 mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2
y2 x3 y3 curveto } ifelse   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 24 a
tx@Dict begin { 356.22847 14.22636 } PutCoor PutBegin  end
 -568 24 a 0 0 1 TeXcolorrgb -19 x Fb(lo)r(cJ)p
-429 5 24 4 v 29 w(blo)r(c)n(k)p -223 5 V 28 w(size[0])p
0 TeXcolorgray -568 24 a
tx@Dict begin  PutEnd  end
 -568 24 a -568 24 a
tx@Dict begin { 357.36638 -31.29819 } PutCoor PutBegin  end
 -568 24
a 0 0 1 TeXcolorrgb -19 x Fb(lo)r(cJ)p -429 5 24 4 v
29 w(blo)r(c)n(k)p -223 5 V 28 w(size[1])p 0 TeXcolorgray
-568 24 a
tx@Dict begin  PutEnd  end
 -568 24 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 227.05276 7.96672
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 249.81505 -14.79555
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 272.57733 -37.55782
  false NArray  /DS 5.69046 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial -568 24 a
tx@Dict begin { 0.0 18.7789 } PutCoor PutBegin  end
 -568 24 a 0.8 0.4 0
TeXcolorrgb -15 x Fb(partition-0)p 0 TeXcolorgray -568
24 a
tx@Dict begin  PutEnd  end
 -568 24 a -568 24 a
tx@Dict begin { 0.0 -3.98335 } PutCoor PutBegin  end
 -568 24 a 0.8 0.4 0 TeXcolorrgb
-15 x Fb(partition-1)p 0 TeXcolorgray -568 24 a
tx@Dict begin  PutEnd  end
 -568
24 a -568 24 a
tx@Dict begin { 75.11522 -23.90019 } PutCoor PutBegin  end
 -568 24 a Fb(cell-0)-568 24 y
tx@Dict begin  PutEnd  end
 -568 24
a -568 24 a
tx@Dict begin { 108.1205 -23.90019 } PutCoor PutBegin  end
 -568 24 a Fb(cell-1)-568 24 y
tx@Dict begin  PutEnd  end
 -568 24 a -568
24 a
tx@Dict begin { 75.11522 9.67383 } PutCoor PutBegin  end
 -568 24 a Fb(cell-2)-568 24 y
tx@Dict begin  PutEnd  end
 -568 24 a -568 24
a
tx@Dict begin { 108.1205 9.67383 } PutCoor PutBegin  end
 -568 24 a Fb(cell-3)-568 24 y
tx@Dict begin  PutEnd  end
 -568 24 a -568 24 a
tx@Dict begin { 194.61665 20.48601 } PutCoor PutBegin  end
 -568
24 a Fb(cell-0)-568 24 y
tx@Dict begin  PutEnd  end
 -568 24 a -568 24 a
tx@Dict begin { 216.80975 -2.27626 } PutCoor PutBegin  end
 -568 24
a Fb(cell-1)-568 24 y
tx@Dict begin  PutEnd  end
 -568 24 a -568 24 a
tx@Dict begin { 240.14122 -25.03854 } PutCoor PutBegin  end
 -568 24 a Fb(cell-2)-568
24 y
tx@Dict begin  PutEnd  end
 -568 24 a -568 24 a
tx@Dict begin { 262.9035 -47.23164 } PutCoor PutBegin  end
 -568 24 a Fb(cell-3)-568 24
y
tx@Dict begin  PutEnd  end
 -568 24 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 239.00287 18.7789 193.47873
18.7789   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 216.24101 -3.98335 216.24101
41.54118   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 284.52744 -26.74564 239.00287
-26.74564   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 261.76515 -49.50792 261.76515
-3.98335   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
216.24101 -60.88884 239.00287 -60.88884   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
261.76515 -60.88884 239.00287 -60.88884   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 24 a
tx@Dict begin { 182.09738 -72.26978 } PutCoor PutBegin  end
 -568 24 a 0.8 0.4 0 TeXcolorrgb -15 x Fb(partition-0)p
0 TeXcolorgray -568 24 a
tx@Dict begin  PutEnd  end
 -568 24 a -568 24 a
tx@Dict begin { 250.38422 -72.26978 } PutCoor PutBegin  end
 -568 24
a 0.8 0.4 0 TeXcolorrgb -15 x Fb(partition-1)p 0 TeXcolorgray
-568 24 a
tx@Dict begin  PutEnd  end
 -568 24 a -568 24 a
tx@Dict begin { 212.25764 55.76756 } PutCoor PutBegin  end
 -568 24 a 0.6 0.2 1 TeXcolorrgb
-19 x Fb(lo)r(cJ)p -429 5 24 4 v 29 w(blo)r(c)n(k)p -223
5 V 28 w(address[0])p 0 TeXcolorgray -568 24 a
tx@Dict begin  PutEnd  end
 -568 24
a -568 24 a
tx@Dict begin { 251.52214 18.7789 } PutCoor PutBegin  end
 -568 24 a 0.6 0 1 TeXcolorrgb -19 x Fb(lo)r(cJ)p
-429 5 24 4 v 29 w(blo)r(c)n(k)p -223 5 V 28 w(address[1])p
0 TeXcolorgray -568 24 a
tx@Dict begin  PutEnd  end
 -568 24 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 205.1145 38.86507 211.1193
45.52455 205.77443 45.7933 216.24101 52.92212   false /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def BezierNArray n 1 eq {
pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub 3 idiv { 6 2 roll 4
2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos} {ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /ArrowPos 0.  def
/loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo
cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t
0.95 mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2
y2 x3 y3 curveto } ifelse   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 250.63864 -7.22823 256.64386
-0.56917 247.8848 11.64966 258.35095 18.7789   false /dArrowPos 1.
1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def BezierNArray n 1 eq {
pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub 3 idiv { 6 2 roll 4
2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos} {ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /ArrowPos 0.  def
/loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo
cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t
0.95 mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2
y2 x3 y3 curveto } ifelse   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568
24 a
tx@Dict begin { 368.74774 35.8503 } PutCoor PutBegin  end
 -568 24 a 0 0.4 0 TeXcolorrgb Fb(lo)r(cal)p -409
24 24 4 v 30 w(base)p -234 24 V 28 w(blo)r(c)n(k)p -29
24 V 27 w(size)p 0 TeXcolorgray -568 24 a
tx@Dict begin  PutEnd  end
 -568 24 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 365.9023 21.62392 369.0803
30.8445 380.12866 27.35303 382.9741 34.1432   false /dArrowPos 1. 1
gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def BezierNArray n 1 eq { pop
pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub 3 idiv { 6 2 roll 4 2 roll
curveto } repeat 6 2 roll 4 2 roll ArrowB /y3 ED /x3 ED /y2 ED /x2
ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx
x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0
sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues {
ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3 exp
mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx t t
mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy
t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll sub
Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def /u
u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos} {ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /ArrowPos 0.  def
/loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo
cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t
0.95 mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2
y2 x3 y3 curveto } ifelse   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 24 a
tx@Dict begin { 179.82153 28.45274 } PutCoor PutBegin  end
 -568 24 a Fa(0)-568
24 y
tx@Dict begin  PutEnd  end
 -568 24 a -568 24 a
tx@Dict begin { 179.82153 5.12128 } PutCoor PutBegin  end
 -568 24 a Fa(1)-568 24 y
tx@Dict begin  PutEnd  end
 -568
24 a -568 24 a
tx@Dict begin { 179.25237 -18.7789 } PutCoor PutBegin  end
 -568 24 a Fa(2)-568 24 y
tx@Dict begin  PutEnd  end
 -568 24 a -568
24 a
tx@Dict begin { 179.25237 -40.97202 } PutCoor PutBegin  end
 -568 24 a Fa(3)-568 24 y
tx@Dict begin  PutEnd  end
 -568 24 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 170.71646 41.54118 193.47873
41.54118   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 170.71646 18.7789 193.47873
18.7789   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 170.71646 -3.98335 193.47873
-3.98335   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 170.71646 -26.74564 239.00287
-26.74564   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 170.71646 -49.50792 239.00287
-49.50792   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial
-595 624 a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 -595 624 a 0 TeXcolorgray 0 TeXcolorgray eop
end

userdict /end-hook known{end-hook}if
%%Trailer
cleartomark countdictstack exch sub { end } repeat restore
%%EOF
